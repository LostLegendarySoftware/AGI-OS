name: AGI OS Build System - MachineGod Ternary CPU Kernel

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target (all, kernel, iso, windows, android)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - kernel
        - iso
        - windows
        - android
      skip_tests:
        description: 'Skip verification tests'
        required: false
        default: false
        type: boolean

env:
  BUILD_SYSTEM_VERSION: "1.0.0"
  KERNEL_ARCH: "x86_64"
  MEMORY_CONSTRAINT: "256MB"

jobs:
  build:
    name: Build AGI OS (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            shell: bash
            artifact_suffix: linux
          - os: windows-latest
            platform: windows
            shell: msys2 {0}
            artifact_suffix: windows
          - os: macos-latest
            platform: macos
            shell: bash
            artifact_suffix: macos
    
    defaults:
      run:
        shell: ${{ matrix.shell }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: Setup build environment (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc \
          binutils \
          make \
          zip \
          qemu-system-x86 \
          gnu-efi \
          xorriso \
          genisoimage \
          ovmf
        
        # Verify GNU-EFI installation
        ls -la /usr/include/efi/ || echo "GNU-EFI headers not found"
        ls -la /usr/lib/crt0-efi-x86_64.o || echo "GNU-EFI runtime not found"
    
    - name: Setup build environment (Windows)
      if: matrix.platform == 'windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-binutils
          mingw-w64-x86_64-make
          zip
          mingw-w64-x86_64-qemu
    
    - name: Setup build environment (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install gcc binutils make zip qemu
        # Note: GNU-EFI may need custom installation on macOS
    
    - name: Cache build dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache
          ~/Library/Caches
          %LOCALAPPDATA%\cache
        key: ${{ runner.os }}-build-${{ hashFiles('**/Makefile', '**/build.sh') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Verify build system structure
      run: |
        echo "=== Build System Structure ==="
        ls -la project/build_system/
        echo "=== Scripts Directory ==="
        ls -la project/build_system/scripts/
        echo "=== Extracted Directory ==="
        ls -la project/extracted/ || echo "Extracted directory not found"
    
    - name: Set build target
      id: build_target
      run: |
        if [ "${{ github.event.inputs.build_target }}" != "" ]; then
          echo "target=${{ github.event.inputs.build_target }}" >> $GITHUB_OUTPUT
        else
          echo "target=all" >> $GITHUB_OUTPUT
        fi
    
    - name: Build AGI OS Kernel
      working-directory: project/build_system
      run: |
        echo "=== Starting AGI OS Build ==="
        echo "Platform: ${{ matrix.platform }}"
        echo "Target: ${{ steps.build_target.outputs.target }}"
        echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
        
        # Make build script executable
        chmod +x scripts/build.sh
        
        # Run build with appropriate flags
        if [ "${{ github.event.inputs.skip_tests }}" == "true" ]; then
          ./scripts/build.sh --target ${{ steps.build_target.outputs.target }} --skip-tests
        else
          ./scripts/build.sh --target ${{ steps.build_target.outputs.target }}
        fi
    
    - name: Run QEMU boot test (Linux only)
      if: matrix.platform == 'linux' && github.event.inputs.skip_tests != 'true'
      working-directory: project/build_system
      run: |
        echo "=== Running QEMU Boot Test ==="
        if [ -f "../final/agi_os_kernel.efi" ]; then
          echo "Testing kernel boot with QEMU..."
          timeout 15s qemu-system-x86_64 \
            -bios /usr/share/ovmf/OVMF.fd \
            -drive format=raw,file=fat:rw:../final \
            -nographic -serial stdio \
            -m 256 \
            > logs/qemu_test_ci.log 2>&1 || true
          echo "QEMU test completed, check logs for details"
          cat logs/qemu_test_ci.log | head -20 || echo "No QEMU log found"
        else
          echo "Kernel EFI not found, skipping QEMU test"
        fi
    
    - name: Verify build outputs
      working-directory: project
      run: |
        echo "=== Build Output Verification ==="
        ls -la final/ || echo "Final directory not found"
        
        if [ -f "final/agi_os_kernel.efi" ]; then
          file_size=$(stat -f%z "final/agi_os_kernel.efi" 2>/dev/null || stat -c%s "final/agi_os_kernel.efi" 2>/dev/null)
          echo "Kernel EFI size: $file_size bytes"
          if [ "$file_size" -gt 1000 ]; then
            echo "✓ Kernel EFI integrity check passed"
          else
            echo "✗ Kernel EFI too small, possible build issue"
            exit 1
          fi
        else
          echo "✗ Kernel EFI not found"
          exit 1
        fi
        
        # Check for other build outputs
        [ -f "final/agi_os_kernel.so" ] && echo "✓ Kernel SO found" || echo "✗ Kernel SO not found"
        [ -f "final/agi_os_"*".iso" ] && echo "✓ ISO image found" || echo "- ISO image not built"
        [ -f "final/agi_os_windows_"*".zip" ] && echo "✓ Windows package found" || echo "- Windows package not built"
        [ -f "final/agi_os_android_"*".apk" ] && echo "✓ Android APK found" || echo "- Android APK not built"
    
    - name: Upload kernel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agi-os-kernel-${{ matrix.artifact_suffix }}
        path: |
          project/final/agi_os_kernel.efi
          project/final/agi_os_kernel.so
        retention-days: 30
    
    - name: Upload ISO artifacts
      if: steps.build_target.outputs.target == 'all' || steps.build_target.outputs.target == 'iso'
      uses: actions/upload-artifact@v4
      with:
        name: agi-os-iso-${{ matrix.artifact_suffix }}
        path: project/final/*.iso
        retention-days: 30
    
    - name: Upload Windows artifacts
      if: steps.build_target.outputs.target == 'all' || steps.build_target.outputs.target == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: agi-os-windows-${{ matrix.artifact_suffix }}
        path: project/final/*windows*.zip
        retention-days: 30
    
    - name: Upload Android artifacts
      if: steps.build_target.outputs.target == 'all' || steps.build_target.outputs.target == 'android'
      uses: actions/upload-artifact@v4
      with:
        name: agi-os-android-${{ matrix.artifact_suffix }}
        path: project/final/*android*.apk
        retention-days: 30
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.artifact_suffix }}
        path: project/build_system/logs/
        retention-days: 7

  package:
    name: Create Final Package
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.build_target == 'all' || github.event.inputs.build_target == ''
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create comprehensive package
      run: |
        echo "=== Creating Final AGI OS Package ==="
        mkdir -p final_package/
        
        # Copy artifacts from all platforms
        find artifacts/ -name "*.efi" -exec cp {} final_package/ \;
        find artifacts/ -name "*.so" -exec cp {} final_package/ \;
        find artifacts/ -name "*.iso" -exec cp {} final_package/ \;
        find artifacts/ -name "*.zip" -exec cp {} final_package/ \;
        find artifacts/ -name "*.apk" -exec cp {} final_package/ \;
        
        # Copy build system components
        cp -r project/build_system/scripts final_package/build_scripts
        cp -r project/build_system/ci final_package/ci_configs
        cp -r project/build_system/configs final_package/boot_configs
        cp -r project/build_system/docs final_package/documentation
        cp -r project/build_system/templates final_package/package_templates
        
        # Create build information
        cat > final_package/BUILD_INFO.txt << EOF
        AGI OS Build System Package
        ===========================
        
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Build System Version: ${{ env.BUILD_SYSTEM_VERSION }}
        Kernel Architecture: Ternary CPU with UEFI Boot
        AI Innovations: 150 integrated innovations from MachineGod framework
        Target Platforms: x86_64 UEFI, Windows, Android
        Memory Constraint: ${{ env.MEMORY_CONSTRAINT }}
        
        GitHub Actions Build:
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        - Commit: ${{ github.sha }}
        - Branch: ${{ github.ref_name }}
        
        Package Contents:
        - agi_os_kernel.efi: Main UEFI bootable kernel
        - agi_os_kernel.so: Shared object version
        - *.iso: Bootable ISO images
        - *windows*.zip: Windows deployment packages
        - *android*.apk: Android application packages
        - build_scripts/: Build automation scripts
        - ci_configs/: CI/CD pipeline configurations
        - boot_configs/: UEFI boot configurations
        - documentation/: Technical documentation
        - package_templates/: Package generation templates
        
        Build System Features:
        - Automated kernel compilation with ternary CPU support
        - Multi-platform package generation
        - UEFI boot configuration
        - CI/CD pipeline integration
        - Comprehensive testing and verification
        - Cross-platform compatibility (Linux, Windows, macOS)
        
        For deployment instructions, see documentation/README.md
        EOF
        
        # Create final ZIP package
        zip -r AGI_OS_build_system.zip final_package/
        
        echo "=== Package Contents ==="
        ls -la final_package/
        echo "=== Final Package ==="
        ls -la AGI_OS_build_system.zip
    
    - name: Upload final package
      uses: actions/upload-artifact@v4
      with:
        name: AGI_OS_build_system
        path: AGI_OS_build_system.zip
        retention-days: 90
    
    - name: Create GitHub Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          AGI_OS_build_system.zip
          final_package/agi_os_kernel.efi
        body: |
          AGI OS Build System Release
          
          This release contains the complete AGI OS build system based on the MachineGod Ternary CPU Kernel with 150 AI innovations.
          
          **Package Contents:**
          - Complete build system with CI/CD configurations
          - UEFI bootable kernel with ternary CPU support
          - Multi-platform deployment packages (ISO, Windows, Android)
          - Comprehensive documentation and build scripts
          
          **Build Information:**
          - Kernel Architecture: Ternary CPU with UEFI Boot
          - Memory Constraint: 256MB optimized
          - AI Innovations: 150 integrated from MachineGod framework
          - Platforms: Linux, Windows, macOS, Android
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        echo "=== Security Scan ==="
        echo "Scanning build system for security issues..."
        
        # Check for hardcoded secrets
        grep -r "password\|secret\|key" project/build_system/ || echo "No obvious secrets found"
        
        # Check file permissions
        find project/build_system/ -type f -perm /o+w -exec echo "World-writable file: {}" \;
        
        # Verify script integrity
        if [ -f "project/build_system/scripts/build.sh" ]; then
          echo "Build script integrity check passed"
        else
          echo "Build script missing!"
          exit 1
        fi
        
        echo "Security scan completed"